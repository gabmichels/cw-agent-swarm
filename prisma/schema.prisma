// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums for workspace models - using String type instead of enum for SQLite compatibility
model WorkspaceProvider {
  id          String   @id @default(uuid())
  name        String   @unique // MICROSOFT_365, GOOGLE_WORKSPACE, ZOHO
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkspaceAccountType {
  id          String   @id @default(uuid())
  name        String   @unique // ORGANIZATIONAL, PERSONAL
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ConnectionType {
  id          String   @id @default(uuid())
  name        String   @unique // SSO, OAUTH_PERSONAL, SERVICE_ACCOUNT
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ConnectionStatus {
  id          String   @id @default(uuid())
  name        String   @unique // ACTIVE, EXPIRED, REVOKED, ERROR
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkspaceCapabilityType {
  id          String   @id @default(uuid())
  name        String   @unique // EMAIL_SEND, EMAIL_READ, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessLevel {
  id          String   @id @default(uuid())
  name        String   @unique // NONE, READ, WRITE, ADMIN
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WorkspaceAction {
  id          String   @id @default(uuid())
  name        String   @unique // CONNECT, DISCONNECT, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ActionResult {
  id          String   @id @default(uuid())
  name        String   @unique // SUCCESS, FAILURE, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Department {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  code        String?  @unique // Short code like 'MKT', 'ENG', 'HR'
  isActive    Boolean  @default(true)
  
  // Budgeting and Finance properties for future analysis
  budgetLimit        Float?   // Monthly/annual budget limit
  currentSpent       Float?   @default(0) // Current spent amount
  currency           String?  @default("USD")
  costCenterId       String?  // Reference to external cost center
  
  // Organizational properties
  managerId          String?  // ID of department manager
  parentDepartmentId String?  // For hierarchical departments
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  parentDepartment Department? @relation("DepartmentHierarchy", fields: [parentDepartmentId], references: [id])
  subDepartments   Department[] @relation("DepartmentHierarchy")

  @@index([name])
  @@index([isActive])
  @@index([parentDepartmentId])
}

model WorkspaceEventType {
  id          String   @id @default(uuid())
  name        String   @unique // NEW_EMAIL, CALENDAR_INVITE, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NotificationPriority {
  id          String   @id @default(uuid())
  name        String   @unique // LOW, NORMAL, HIGH, URGENT
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NotificationStatus {
  id          String   @id @default(uuid())
  name        String   @unique // PENDING, PROCESSING, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Main models
model WorkspaceConnection {
  id                String   @id @default(uuid())
  userId            String?
  organizationId    String?
  provider          String   // References WorkspaceProvider.name
  accountType       String   // References WorkspaceAccountType.name
  connectionType    String   // References ConnectionType.name
  accessToken       String   // Using String instead of @db.Text
  refreshToken      String?  // Using String instead of @db.Text
  tokenExpiresAt    DateTime?
  scopes            String   // Storing as comma-separated string
  providerAccountId String
  displayName       String
  email             String
  domain            String?
  status            String   // References ConnectionStatus.name
  lastSyncAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  permissions       AgentWorkspacePermission[]
  auditLogs         WorkspaceAuditLog[]
  notifications     AgentNotification[]

  @@index([userId])
  @@index([organizationId])
  @@index([provider])
  @@index([email])
  @@index([status])
  @@unique([userId, organizationId, provider, email], name: "unique_workspace_connection")
}

model AgentWorkspacePermission {
  id                    String   @id @default(uuid())
  agentId               String
  workspaceConnectionId String
  capability            String   // References WorkspaceCapabilityType.name
  accessLevel           String   // References AccessLevel.name
  restrictions          String?  // Storing JSON as string
  grantedBy             String
  grantedAt             DateTime @default(now())
  revokedAt             DateTime?
  lastUsedAt            DateTime @default(now())

  // Relations
  workspaceConnection   WorkspaceConnection @relation(fields: [workspaceConnectionId], references: [id])

  @@index([agentId])
  @@index([workspaceConnectionId])
  @@index([capability])
  @@index([accessLevel])
}

model WorkspaceCapability {
  id                String   @id @default(uuid())
  workspaceConnectionId String
  capabilityType    String   // References WorkspaceCapabilityType.name
  isEnabled         Boolean  @default(true)
  configuration     String   // Storing JSON as string
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([workspaceConnectionId])
  @@index([capabilityType])
}

model WorkspaceAuditLog {
  id                    String   @id @default(uuid())
  workspaceConnectionId String
  agentId               String?
  action                String   // References WorkspaceAction.name
  capability            String   // References WorkspaceCapabilityType.name
  resourceId            String?
  result                String   // References ActionResult.name
  metadata              String?  // Storing JSON as string
  timestamp             DateTime @default(now())

  // Relations
  workspaceConnection   WorkspaceConnection @relation(fields: [workspaceConnectionId], references: [id])

  @@index([workspaceConnectionId])
  @@index([agentId])
  @@index([action])
  @@index([timestamp])
}

model AgentNotification {
  id            String   @id @default(uuid())
  agentId       String
  connectionId  String
  eventType     String   // References WorkspaceEventType.name
  eventData     String   // Storing JSON as string
  priority      String   // References NotificationPriority.name
  status        String   // References NotificationStatus.name
  createdAt     DateTime @default(now())
  processedAt   DateTime?
  failedAt      DateTime?
  retryCount    Int      @default(0)
  errorMessage  String?

  // Relations
  workspaceConnection WorkspaceConnection @relation(fields: [connectionId], references: [id])

  @@index([agentId])
  @@index([connectionId])
  @@index([eventType])
  @@index([status])
  @@index([createdAt])
}

// Existing models
model Chat {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    ChatMessage[]
  attachments ChatAttachment[]
}

model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  content   String
  role      String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
}

model ChatAttachment {
  id        String   @id @default(uuid())
  chatId    String
  type      String   @default("file")
  url       String   @default("")
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
}

// Social Media Management Tables - Following IMPLEMENTATION_GUIDELINES.md
model SocialMediaProvider {
  id          String   @id @default(uuid())
  name        String   @unique // TWITTER, LINKEDIN, FACEBOOK, INSTAGRAM, REDDIT, TIKTOK
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMediaConnectionStatus {
  id          String   @id @default(uuid())
  name        String   @unique // ACTIVE, EXPIRED, ERROR, REVOKED
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMediaCapability {
  id          String   @id @default(uuid())
  name        String   @unique // POST_CREATE, POST_READ, etc.
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMediaConnection {
  id                    String   @id @default(uuid())
  userId                String?
  organizationId        String?
  provider              String   // References SocialMediaProvider.name
  providerAccountId     String
  accountDisplayName    String
  accountUsername       String
  accountType           String   // personal, business, creator
  encryptedCredentials  String   // AES-256 encrypted OAuth tokens
  scopes                String   // Comma-separated scopes
  connectionStatus      String   // References SocialMediaConnectionStatus.name
  metadata              String?  // JSON metadata as string
  lastValidated         DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  permissions           AgentSocialMediaPermission[]
  auditLogs             SocialMediaAuditLog[]

  @@index([userId])
  @@index([organizationId])
  @@index([provider])
  @@index([providerAccountId])
  @@index([connectionStatus])
}

model AgentSocialMediaPermission {
  id                        String   @id @default(uuid())
  agentId                   String
  socialMediaConnectionId   String
  capabilities              String   // Comma-separated capabilities
  accessLevel               String   // NONE, READ, LIMITED, FULL
  restrictions              String?  // JSON restrictions as string
  grantedBy                 String
  grantedAt                 DateTime @default(now())
  revokedAt                 DateTime?
  isActive                  Boolean  @default(true)
  lastUsedAt                DateTime @default(now())

  // Relations
  socialMediaConnection     SocialMediaConnection @relation(fields: [socialMediaConnectionId], references: [id])

  @@index([agentId])
  @@index([socialMediaConnectionId])
  @@index([accessLevel])
  @@index([isActive])
}

model SocialMediaAuditLog {
  id                        String   @id @default(uuid())
  socialMediaConnectionId   String
  agentId                   String?
  action                    String   // post, schedule, delete, authenticate, etc.
  platform                  String   // References SocialMediaProvider.name
  content                   String?  // JSON content as string
  result                    String   // success, failure, pending
  error                     String?
  ipAddress                 String
  userAgent                 String
  metadata                  String?  // JSON metadata as string
  timestamp                 DateTime @default(now())

  // Relations
  socialMediaConnection     SocialMediaConnection @relation(fields: [socialMediaConnectionId], references: [id])

  @@index([socialMediaConnectionId])
  @@index([agentId])
  @@index([action])
  @@index([platform])
  @@index([timestamp])
}

// OAuth State Management - for secure OAuth flows
model OAuthState {
  id            String   @id @default(uuid())
  state         String   @unique
  provider      String
  redirectUri   String
  tenantId      String?  // Multi-tenant support
  userId        String?  // User identifier
  platform      String?  // Platform name (e.g., 'twitter', 'instagram')
  accountType   String?  // Account type (e.g., 'personal', 'business')
  codeVerifier  String?  // PKCE code verifier
  returnUrl     String?  // Return URL after OAuth
  metadata      String?  // Additional metadata as JSON string
  createdAt     DateTime @default(now())
  expiresAt     DateTime

  @@index([state])
  @@index([expiresAt])
  @@index([tenantId])
  @@index([userId])
  @@index([platform])
}

// Cost Tracking Models

model CostEntry {
  id              String   @id @default(uuid())
  timestamp       DateTime @default(now())
  category        String   // CostCategory enum value
  service         String   // Service that incurred the cost (apify, openai, n8n, etc.)
  operation       String   // Specific operation
  costUsd         Float    // Cost in USD
  unitsConsumed   Int      // Number of units consumed
  unitType        String   // CostUnit enum value
  costPerUnit     Float    // Cost per unit
  tier            String   // CostTier enum value
  
  // Who initiated this cost
  initiatedByType String   // 'agent', 'user', 'system'
  initiatedById   String   // Agent ID, User ID, or System ID
  initiatedByName String?  // Optional display name
  
  // Session/workflow context
  sessionId       String?  // Optional session ID
  
  // Metadata stored as JSON
  toolParameters    String? // JSON string of tool parameters
  executionDetails  String? // JSON string of execution details
  researchContext   String? // JSON string of research context
  workflowContext   String? // JSON string of workflow context
  departmentId      String? // Department attribution
  tags              String? // JSON array of tags
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([timestamp])
  @@index([category])
  @@index([service])
  @@index([initiatedByType, initiatedById])
  @@index([sessionId])
  @@index([departmentId])
  @@index([tier])
}

model CostBudget {
  id                  String   @id @default(uuid())
  name                String
  period              String   // 'daily', 'weekly', 'monthly', 'yearly'
  budgetUsd           Float    // Budget amount in USD
  spentUsd            Float    @default(0) // Current spent amount
  remainingUsd        Float    // Remaining budget (calculated)
  utilizationPercent  Float    @default(0) // Utilization percentage
  
  // Categories and services this budget applies to
  categories          String   // JSON array of CostCategory values
  services            String?  // JSON array of service names
  departmentId        String?  // Optional department filter
  
  // Alert thresholds (percentages)
  warningThreshold    Float    @default(75)
  criticalThreshold   Float    @default(90)
  maximumThreshold    Float    @default(100)
  
  // Budget status
  status              String   @default("active") // 'active', 'exceeded', 'suspended'
  
  // Auto-actions when limits are hit
  onWarningAction     String?  // 'notify', 'throttle'
  onCriticalAction    String?  // 'notify', 'throttle', 'suspend'
  onMaximumAction     String?  // 'notify', 'suspend', 'block'
  
  // Validity period
  validFrom           DateTime
  validTo             DateTime
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([period])
  @@index([status])
  @@index([departmentId])
  @@index([validFrom, validTo])
}

model CostAlert {
  id                String   @id @default(uuid())
  name              String
  type              String   // 'budget_threshold', 'unusual_spending', 'cost_spike', 'service_limit'
  
  // Conditions (stored as JSON)
  categories        String?  // JSON array of CostCategory values to monitor
  services          String?  // JSON array of service names to monitor
  costThresholdUsd  Float?   // Cost threshold in USD
  percentageIncrease Float?  // Percentage increase threshold
  timeWindow        String?  // 'hour', 'day', 'week', 'month'
  minOperations     Int?     // Minimum operations to trigger
  
  // Alert configuration
  severity          String   // 'info', 'warning', 'critical'
  enabled           Boolean  @default(true)
  cooldownMinutes   Int      @default(60) // Cooldown period between alerts
  
  // Notification channels (stored as JSON)
  emailNotifications    String? // JSON array of email addresses
  slackNotifications    String? // JSON array of Slack channels/webhooks
  webhookNotifications  String? // JSON array of webhook URLs
  
  // Tracking
  lastTriggered     DateTime?
  triggerCount      Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([type])
  @@index([severity])
  @@index([enabled])
  @@index([lastTriggered])
}

model ToolCostConfig {
  id                String   @id @default(uuid())
  toolId            String   @unique // Tool identifier
  toolName          String   // Human-readable tool name
  category          String   // CostCategory enum value
  pricingModel      String   // 'per_call', 'per_result', 'per_minute', 'per_token', 'tiered', 'custom'
  
  // Base cost configuration
  fixedCostUsd      Float?   // Fixed cost per operation
  variableCostPerUnit Float? // Variable cost per unit
  unitType          String?  // CostUnit enum value for variable cost
  
  // Tiered pricing (stored as JSON)
  tieredPricing     String?  // JSON array of pricing tiers
  
  // Free tier limits
  freeTierUnits     Int?     // Units per period for free tier
  freeTierPeriod    String?  // 'daily', 'weekly', 'monthly'
  freeTierResetDay  Int?     // Day of month for monthly reset
  
  // Cost estimation factors (stored as JSON)
  estimationFactors String?  // JSON object with factors and multipliers
  baseMultiplier    Float    @default(1.0)
  
  // Configuration status
  enabled           Boolean  @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([toolId])
  @@index([category])
  @@index([enabled])
}

model ExternalWorkflowCost {
  id                      String   @id @default(uuid())
  platform                String   // 'n8n', 'zapier', 'make', 'power_automate', 'custom'
  workflowId              String   // Workflow ID on the platform
  workflowName            String   // Human-readable workflow name
  
  // Cost structure
  costPerExecution        Float    // Cost per execution
  monthlySubscriptionCost Float?   // Monthly subscription cost if applicable
  
  // Usage limits
  executionsPerMonth      Int?     // Monthly execution limit
  dataTransferMBLimit     Int?     // Data transfer limit in MB
  computeMinutesLimit     Int?     // Compute minutes limit
  
  // Current usage tracking
  executionsThisMonth     Int      @default(0)
  dataTransferMBUsed      Int      @default(0)
  computeMinutesUsed      Int      @default(0)
  
  // Cost breakdown
  subscriptionCost        Float    @default(0)
  executionCosts          Float    @default(0)
  overageCosts            Float    @default(0)
  totalCost               Float    @default(0)
  
  // Reset tracking for monthly limits
  lastResetDate           DateTime @default(now())
  
  // Configuration status
  enabled                 Boolean  @default(true)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@unique([platform, workflowId])
  @@index([platform])
  @@index([enabled])
  @@index([lastResetDate])
}

model CostOptimization {
  id                    String   @id @default(uuid())
  title                 String
  description           String   // Long description
  category              String   // CostCategory enum value
  service               String   // Service this applies to
  potentialSavingsUsd   Float    // Potential savings in USD
  effort                String   // 'low', 'medium', 'high'
  priority              String   // 'low', 'medium', 'high', 'critical'
  
  // Actions and risks (stored as JSON)
  actions               String   // JSON array of action objects
  risks                 String   // JSON array of risk objects
  
  // Status tracking
  status                String   @default("pending") // 'pending', 'in_progress', 'completed', 'dismissed'
  assignedTo            String?  // Optional assignee
  dueDate               DateTime?
  completedAt           DateTime?
  
  // Analysis context
  analysisStartDate     DateTime // Start date of analysis period
  analysisEndDate       DateTime // End date of analysis period
  
  generatedAt           DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([category])
  @@index([service])
  @@index([status])
  @@index([priority])
  @@index([potentialSavingsUsd])
}

model CostForecast {
  id                    String   @id @default(uuid())
  forecastPeriodStart   DateTime
  forecastPeriodEnd     DateTime
  
  // Predictions by category (stored as JSON)
  predictions           String   // JSON object with category predictions
  totalPredictedCost    Float    // Total predicted cost
  
  // Forecast metadata
  confidence            Float    // Overall confidence (0-1)
  accuracy              Float?   // Accuracy if historical
  
  // Influencing factors (stored as JSON)
  factors               String   // JSON array of factor objects
  
  // Analysis context
  basedOnPeriodStart    DateTime // Historical period used for forecast
  basedOnPeriodEnd      DateTime
  
  generatedAt           DateTime @default(now())

  @@index([forecastPeriodStart, forecastPeriodEnd])
  @@index([totalPredictedCost])
  @@index([confidence])
}

// ============================================================================
// INTEGRATION MANAGEMENT SYSTEM
// ============================================================================

model IntegrationType {
  id          String   @id @default(uuid())
  name        String   @unique // OAUTH_2, API_KEY, OAUTH_1
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model IntegrationCategory {
  id          String   @id @default(uuid())
  name        String   @unique // SOCIAL_MEDIA, WORKSPACE, EXTERNAL_WORKFLOW, AI_SERVICES
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model IntegrationProvider {
  id                String   @id @default(uuid())
  name              String   @unique // OPENAI, CODA, STRIPE, ZOOM, DROPBOX
  displayName       String   // "OpenAI", "Coda", "Stripe API"
  category          String   // References IntegrationCategory.name
  type              String   // References IntegrationType.name
  description       String?
  iconUrl           String?
  documentationUrl  String?
  isActive          Boolean  @default(true)
  requiresUserAuth  Boolean  @default(true) // false for system-wide keys
  
  // OAuth Configuration (if applicable)
  oauthAuthUrl      String?
  oauthTokenUrl     String?
  oauthScopes       String? // JSON array as string
  
  // API Key Configuration (if applicable)
  apiKeyName        String? // "API Key", "Secret Key", "Access Token"
  apiKeyFormat      String? // Validation regex or format description
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  connections       IntegrationConnection[]
  systemConfig      SystemIntegrationConfig?
  
  @@index([category])
  @@index([type])
  @@index([isActive])
}

model IntegrationConnection {
  id                String   @id @default(uuid())
  userId            String?  // null for system-wide connections
  organizationId    String?
  providerId        String
  
  // Connection Details
  displayName       String   // User-friendly name
  status            String   @default("ACTIVE") // ACTIVE, EXPIRED, ERROR, DISABLED
  
  // OAuth Data (encrypted)
  accessToken       String?
  refreshToken      String?
  tokenExpiresAt    DateTime?
  scopes            String?  // JSON array as string
  
  // API Key Data (encrypted)
  apiKey            String?
  apiSecret         String?
  
  // Metadata
  providerAccountId String?  // External account ID
  accountEmail      String?
  accountName       String?
  lastValidated     DateTime?
  lastUsed          DateTime?
  
  // Configuration
  isEnabled         Boolean  @default(true)
  configuration     String?  // JSON configuration as string
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  provider          IntegrationProvider @relation(fields: [providerId], references: [id])
  permissions       AgentIntegrationPermission[]
  auditLogs         IntegrationAuditLog[]
  
  @@index([userId])
  @@index([organizationId])
  @@index([providerId])
  @@index([status])
  @@index([isEnabled])
}

model AgentIntegrationPermission {
  id                      String   @id @default(uuid())
  agentId                 String
  integrationConnectionId String
  capabilities            String   // JSON array of allowed capabilities
  accessLevel             String   // READ, WRITE, ADMIN
  restrictions            String?  // JSON restrictions
  grantedBy               String
  grantedAt               DateTime @default(now())
  revokedAt               DateTime?
  lastUsedAt              DateTime?
  
  // Relations
  connection              IntegrationConnection @relation(fields: [integrationConnectionId], references: [id])
  
  @@index([agentId])
  @@index([integrationConnectionId])
}

model IntegrationAuditLog {
  id                      String   @id @default(uuid())
  integrationConnectionId String
  agentId                 String?
  action                  String   // CONNECT, DISCONNECT, USE, REFRESH, ERROR
  result                  String   // SUCCESS, FAILURE
  details                 String?  // JSON details
  ipAddress               String?
  userAgent               String?
  createdAt               DateTime @default(now())
  
  // Relations
  connection              IntegrationConnection @relation(fields: [integrationConnectionId], references: [id])
  
  @@index([integrationConnectionId])
  @@index([agentId])
  @@index([action])
  @@index([createdAt])
}

// ============================================================================
// SYSTEM CONFIGURATION
// ============================================================================

model SystemIntegrationConfig {
  id                String   @id @default(uuid())
  providerId        String   @unique
  
  // System-wide API keys (for fallback)
  systemApiKey      String?  // Encrypted
  systemApiSecret   String?  // Encrypted
  
  // OAuth App Configuration
  clientId          String?
  clientSecret      String?  // Encrypted
  redirectUri       String?
  
  // Usage Limits
  dailyLimit        Int?
  monthlyLimit      Int?
  rateLimitPerMin   Int?
  
  // Feature Flags
  isEnabled         Boolean  @default(true)
  requireUserAuth   Boolean  @default(true)
  allowSystemFallback Boolean @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  provider          IntegrationProvider @relation(fields: [providerId], references: [id])
  
  @@index([providerId])
  @@index([isEnabled])
}

// ============================================================================
// ERROR LOGGING AND COMMUNICATION SYSTEM
// ============================================================================

model ErrorType {
  id          String   @id @default(uuid())
  name        String   @unique // TOOL_EXECUTION, API_FAILURE, PERMISSION_DENIED, WORKSPACE_CONNECTION, DATABASE_ERROR, VALIDATION_ERROR, AUTHENTICATION_ERROR, RATE_LIMIT_ERROR, NETWORK_ERROR, EXTERNAL_SERVICE_ERROR
  description String?
  category    String   // SYSTEM, USER_ACTION, EXTERNAL, INTERNAL
  severity    String   // References ErrorSeverity.name
  isRetryable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([category])
  @@index([severity])
  @@index([isRetryable])
}

model ErrorSeverity {
  id          String   @id @default(uuid())
  name        String   @unique // LOW, MEDIUM, HIGH, CRITICAL, EMERGENCY
  description String?
  priority    Int      @unique // Numeric priority for sorting (1=highest, 5=lowest)
  color       String?  // Hex color for UI display
  
  // Notification settings
  requiresImmediateNotification Boolean @default(false)
  requiresEscalation           Boolean @default(false)
  escalationTimeoutMinutes     Int?    // Minutes before escalation
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([priority])
}

model ErrorStatus {
  id          String   @id @default(uuid())
  name        String   @unique // NEW, IN_PROGRESS, RETRYING, RESOLVED, IGNORED, ESCALATED, FAILED_PERMANENTLY
  description String?
  isFinal     Boolean  @default(false) // Cannot transition from final states
  color       String?  // Hex color for UI display
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([name])
  @@index([isFinal])
}

model ErrorLog {
  id                String   @id @default(uuid()) // Using ULID in service layer
  errorType         String   // References ErrorType.name
  severity          String   // References ErrorSeverity.name  
  status            String   // References ErrorStatus.name
  
  // Context information
  agentId           String?
  userId            String?
  sessionId         String?
  conversationId    String?
  toolId            String?
  operation         String?   // High-level operation being performed
  component         String?   // System component where error occurred
  
  // Error details
  message           String    // Primary error message
  userMessage       String?   // User-friendly message (if different)
  stackTrace        String?   // Technical stack trace
  errorCode         String?   // Specific error code
  errorData         String?   // JSON metadata
  
  // Request/Response context
  requestId         String?   // Request ID for tracing
  requestUrl        String?   // URL if applicable
  httpStatusCode    Int?      // HTTP status if applicable
  
  // Retry tracking
  retryAttempt      Int      @default(0)
  maxRetries        Int      @default(3)
  retryStrategy     String?  // EXPONENTIAL_BACKOFF, LINEAR, IMMEDIATE
  lastRetryAt       DateTime?
  nextRetryAt       DateTime?
  
  // Resolution tracking
  resolvedAt        DateTime?
  resolvedBy        String?   // User ID or system component
  resolutionMethod  String?   // AUTO_RETRY, MANUAL_FIX, USER_ACTION, IGNORE
  resolutionNotes   String?
  
  // User communication
  userNotified      Boolean  @default(false)
  notificationSent  DateTime?
  notificationId    String?   // Reference to notification record
  
  // Related errors
  parentErrorId     String?   // Parent error that caused this one
  rootCauseErrorId  String?   // Root cause in error chain
  
  // Performance impact
  impactedOperations String?  // JSON array of impacted operations
  estimatedImpact   String?   // LOW, MEDIUM, HIGH, CRITICAL
  
  // System metadata
  serverInstance    String?   // Server/container instance
  version           String?   // Application version
  environment       String?   // dev, staging, production
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  childErrors       ErrorLog[] @relation("ErrorHierarchy")
  parentError       ErrorLog?  @relation("ErrorHierarchy", fields: [parentErrorId], references: [id])
  resolutions       ErrorResolution[]
  notifications     ErrorNotificationLog[]
  
  @@index([agentId])
  @@index([userId])
  @@index([sessionId])
  @@index([conversationId])
  @@index([errorType])
  @@index([severity])
  @@index([status])
  @@index([operation])
  @@index([component])
  @@index([createdAt])
  @@index([resolvedAt])
  @@index([retryAttempt])
  @@index([parentErrorId])
  @@index([rootCauseErrorId])
  @@index([requestId])
  @@index([environment])
}

model ErrorResolution {
  id              String   @id @default(uuid())
  errorLogId      String
  resolutionType  String   // AUTO_RETRY_SUCCESS, MANUAL_FIX, USER_WORKAROUND, SYSTEM_RECOVERY, ESCALATION
  description     String
  actionsTaken    String?  // JSON array of actions taken
  success         Boolean  @default(true)
  appliedBy       String?  // User ID or system component
  timeToResolve   Int?     // Minutes to resolve
  preventionNotes String?  // How to prevent in future
  
  createdAt       DateTime @default(now())
  
  // Relations
  errorLog        ErrorLog @relation(fields: [errorLogId], references: [id])
  
  @@index([errorLogId])
  @@index([resolutionType])
  @@index([success])
  @@index([createdAt])
}

model ErrorPattern {
  id                String   @id @default(uuid())
  name              String   @unique
  description       String
  pattern           String   // Regex or JSON pattern definition
  errorType         String   // References ErrorType.name
  severity          String   // References ErrorSeverity.name
  
  // Pattern matching criteria
  messagePattern    String?  // Regex for error message
  componentPattern  String?  // Regex for component
  operationPattern  String?  // Regex for operation
  
  // Auto-resolution settings
  autoRetryEnabled  Boolean  @default(false)
  maxAutoRetries    Int      @default(3)
  retryStrategy     String?  // EXPONENTIAL_BACKOFF, LINEAR, IMMEDIATE
  
  // Notification settings
  notifyUsers       Boolean  @default(true)
  notifyAdmins      Boolean  @default(false)
  escalateAfter     Int?     // Minutes before escalation
  
  // Pattern statistics
  matchCount        Int      @default(0)
  lastMatched       DateTime?
  resolutionRate    Float?   // Percentage of successful resolutions
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([errorType])
  @@index([severity])
  @@index([isActive])
  @@index([lastMatched])
}

model ErrorNotificationLog {
  id                String   @id @default(uuid())
  errorLogId        String
  notificationType  String   // USER_NOTIFICATION, ADMIN_ALERT, ESCALATION, RETRY_PROGRESS
  recipientType     String   // USER, ADMIN, SYSTEM
  recipientId       String?  // User ID or system identifier
  
  // Notification details
  title             String
  message           String
  channel           String   // EMAIL, SMS, PUSH, WEBSOCKET, SLACK
  sent              Boolean  @default(false)
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  
  // Delivery tracking
  attempts          Int      @default(0)
  maxAttempts       Int      @default(3)
  lastAttemptAt     DateTime?
  failureReason     String?
  
  // Notification metadata
  priority          String   // LOW, NORMAL, HIGH, URGENT
  metadata          String?  // JSON metadata
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  errorLog          ErrorLog @relation(fields: [errorLogId], references: [id])
  
  @@index([errorLogId])
  @@index([notificationType])
  @@index([recipientType])
  @@index([recipientId])
  @@index([sent])
  @@index([channel])
  @@index([createdAt])
}


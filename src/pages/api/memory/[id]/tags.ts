import { NextApiRequest, NextApiResponse } from 'next';
import { getMemoryServices } from '../../../../server/memory/services';
import { MemoryType } from '../../../../server/memory/config/types';

type ResponseData = {
  success?: boolean;
  error?: string;
  details?: string;
  memoryId?: string;
  tags?: string[];
};

export default async function handler(
  req: NextApiRequest, 
  res: NextApiResponse<ResponseData>
) {
  // Get the memory ID from the route parameter
  const memoryId = req.query.id as string;

  // Only allow PUT requests for updating tags
  if (req.method !== 'PUT') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // Basic validation
    if (!memoryId) {
      return res.status(400).json({ error: 'Memory ID is required' });
    }

    // Get tags from request body
    const { tags } = req.body;
    
    if (!tags || !Array.isArray(tags)) {
      return res.status(400).json({ error: 'Tags must be provided as an array' });
    }

    console.log(`Updating tags for memory ${memoryId}:`, tags);

    // Get memory services
    const { memoryService, client } = await getMemoryServices();

    // First, we need to try to find the memory in each possible collection
    // Start by trying the main memory collections
    const collections = Object.values(MemoryType).map(type => {
      // Convert type to collection name using convention
      return type.toLowerCase();
    });

    let memory = null;
    let memoryType = MemoryType.MESSAGE; // Default to message type if not found

    // Try to find the memory in any collection
    for (const collection of collections) {
      try {
        const points = await client.getPoints(collection, [memoryId]);
        if (points && points.length > 0) {
          memory = points[0];
          memoryType = (memory.payload?.type as MemoryType) || memoryType;
          break;
        }
      } catch (err) {
        // Ignore errors for collections that don't exist
        continue;
      }
    }

    if (!memory) {
      return res.status(404).json({ error: 'Memory not found in any collection' });
    }

    // Update memory tags
    const updateResult = await memoryService.updateMemory({
      id: memoryId,
      type: memoryType,
      metadata: {
        tags: tags,
        // If this was previously auto-generated, mark it as manually approved now
        autoGeneratedTags: false,
        // Remove the suggested tags since they've been accepted/modified
        suggestedTags: null
      }
    });

    if (!updateResult) {
      return res.status(500).json({ error: 'Failed to update memory tags' });
    }

    // Return success with updated tags
    return res.status(200).json({
      success: true,
      memoryId,
      tags
    });
  } catch (error) {
    console.error('Error updating memory tags:', error);
    
    return res.status(500).json({ 
      error: 'Failed to update memory tags', 
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
} 
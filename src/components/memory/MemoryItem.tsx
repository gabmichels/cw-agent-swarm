import React, { useState } from 'react';
import { Tag, Info, Calendar } from 'lucide-react';
import SuggestedTagsApproval from '../tags/SuggestedTagsApproval';
import { MemoryItem as MemoryItemType } from '../../types';

interface MemoryItemProps {
  memory: MemoryItemType & {
    kind?: string;
    metadata?: Record<string, any>;
  };
  onTagUpdate: (memoryId: string, tags: string[]) => void;
  onTagSuggestionRemove: (memoryId: string) => void;
}

/**
 * Component for displaying a single memory item with tag approval
 */
const MemoryItem: React.FC<MemoryItemProps> = ({
  memory,
  onTagUpdate,
  onTagSuggestionRemove
}) => {
  const [expanded, setExpanded] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  
  // Check if this memory has auto-generated tags that need approval
  const hasAutoGeneratedTags = memory.metadata?.autoGeneratedTags === true;
  
  // Extract suggested tags vs. manually added tags
  const manualTags = hasAutoGeneratedTags 
    ? memory.tags?.filter(tag => !(memory.metadata?.suggestedTags || []).includes(tag)) || []
    : memory.tags || [];
  
  const suggestedTags = hasAutoGeneratedTags 
    ? (memory.metadata?.suggestedTags || []).filter(Boolean)
    : [];

  // Handle tag approval
  const handleTagApproval = (memoryId: string, approvedTags: string[]) => {
    // Combine manually added tags with approved tags
    const updatedTags = [...manualTags, ...approvedTags];
    
    // Update tags via parent component
    onTagUpdate(memoryId, updatedTags);
    
    // Hide the suggestions UI
    setShowSuggestions(false);
  };
  
  // Handle tag suggestion rejection
  const handleTagRejection = (memoryId: string) => {
    onTagSuggestionRemove(memoryId);
    setShowSuggestions(false);
  };
  
  // Format the created date
  const formattedDate = memory.created 
    ? new Date(memory.created).toLocaleString()
    : memory.timestamp
    ? new Date(memory.timestamp).toLocaleString()
    : 'Unknown date';
  
  // Ensure we have a valid ID
  const memoryId = memory.id || `memory-${Date.now()}`;
  
  return (
    <div className="border border-gray-700 rounded-lg bg-gray-800 p-4 mb-4">
      {/* Memory header */}
      <div className="flex justify-between items-start mb-2">
        <div className="flex items-center">
          {memory.category && (
            <span className="mr-2 px-2 py-1 bg-blue-900 text-blue-100 rounded-md text-xs">
              {memory.category}
            </span>
          )}
          {memory.kind && (
            <span className="mr-2 px-2 py-1 bg-purple-900 text-purple-100 rounded-md text-xs">
              {memory.kind}
            </span>
          )}
          <span className="text-gray-400 text-xs flex items-center">
            <Calendar className="h-3 w-3 mr-1" /> {formattedDate}
          </span>
        </div>
        <button
          onClick={() => setExpanded(!expanded)}
          className="text-blue-400 text-sm hover:underline"
        >
          {expanded ? 'Show Less' : 'Show More'}
        </button>
      </div>
      
      {/* Memory content */}
      <div className={`mb-3 ${expanded ? '' : 'line-clamp-3'}`}>
        <p className="text-sm">{memory.content}</p>
      </div>
      
      {/* Display existing tags */}
      {manualTags.length > 0 && (
        <div className="mb-3">
          <div className="flex items-center text-xs text-gray-400 mb-1">
            <Tag className="h-3 w-3 mr-1" /> Tags:
          </div>
          <div className="flex flex-wrap gap-1">
            {manualTags.map((tag, index) => (
              <span
                key={`${tag}-${index}`}
                className="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-700 text-gray-200"
              >
                {tag}
              </span>
            ))}
          </div>
        </div>
      )}
      
      {/* Display suggested tags for approval if they exist */}
      {hasAutoGeneratedTags && suggestedTags.length > 0 && showSuggestions && (
        <SuggestedTagsApproval
          memoryId={memoryId}
          suggestedTags={suggestedTags}
          existingTags={manualTags}
          onApprove={handleTagApproval}
          onReject={handleTagRejection}
        />
      )}
      
      {/* Metadata section (only when expanded) */}
      {expanded && memory.metadata && Object.keys(memory.metadata).length > 0 && (
        <div className="mt-3 border-t border-gray-700 pt-2">
          <div className="flex items-center text-xs text-gray-400 mb-1">
            <Info className="h-3 w-3 mr-1" /> Metadata:
          </div>
          <div className="text-xs text-gray-500 grid grid-cols-2 gap-1">
            {Object.entries(memory.metadata)
              .filter(([key]) => !['autoGeneratedTags', 'suggestedTags'].includes(key))
              .map(([key, value]) => (
                <div key={key} className="flex">
                  <span className="font-medium mr-1">{key}:</span>
                  <span>{typeof value === 'object' ? JSON.stringify(value) : String(value)}</span>
                </div>
              ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default MemoryItem; 
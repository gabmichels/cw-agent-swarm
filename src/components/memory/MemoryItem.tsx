import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Tag, Info, Calendar, Clock, ChevronDown, ChevronUp, Edit, RefreshCw, RotateCcw } from 'lucide-react';
import SuggestedTagsApproval from '../tags/SuggestedTagsApproval';
import { MemoryType } from '../../server/memory/config';
import { BaseMemorySchema, MemoryPoint } from '../../server/memory/models';
import useMemory from '../../hooks/useMemory';

// Define memory edit record type to match the new standardized schema
interface MemoryEditSchema extends BaseMemorySchema {
  metadata: {
    original_memory_id: string;
    edit_type: 'create' | 'update' | 'delete';
    editor_type: 'human' | 'agent' | 'system';
    editor_id?: string;
    diff_summary?: string;
    current: boolean;
    previous_version_id?: string;
    [key: string]: any;
  }
}

interface MemoryEditRecord {
  id: string;
  payload: MemoryEditSchema;
}

// Related version interface
interface RelatedVersion {
  id: string;
  type: string;
  timestamp: string;
  text?: string;
  content?: string;
  error?: boolean;
}

interface MemoryItemProps {
  memory: MemoryPoint<BaseMemorySchema> & {
    kind?: string;
    metadata?: Record<string, any>;
  };
  onTagUpdate: (memoryId: string, tags: string[]) => void;
  onTagSuggestionRemove: (memoryId: string) => void;
}

/**
 * Component for displaying a single memory item with tag approval
 */
const MemoryItem: React.FC<MemoryItemProps> = ({
  memory,
  onTagUpdate,
  onTagSuggestionRemove
}) => {
  // Use memory hook for version history
  const { getMemory } = useMemory();
  
  const [expanded, setExpanded] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true);
  const [historyExpanded, setHistoryExpanded] = useState(false);
  const [memoryHistory, setMemoryHistory] = useState<MemoryEditRecord[]>([]);
  const [isLoadingHistory, setIsLoadingHistory] = useState(false);
  const [selectedVersion, setSelectedVersion] = useState<RelatedVersion | null>(null);
  const [isLoadingVersion, setIsLoadingVersion] = useState(false);
  
  // Check if this memory has auto-generated tags that need approval
  const hasAutoGeneratedTags = memory.payload?.metadata?.autoGeneratedTags === true;
  
  // Extract suggested tags vs. manually added tags
  const manualTags = hasAutoGeneratedTags 
    ? memory.payload?.metadata?.tags?.filter(tag => !(memory.payload?.metadata?.suggestedTags || []).includes(tag)) || []
    : memory.payload?.metadata?.tags || [];
  
  const suggestedTags = hasAutoGeneratedTags 
    ? (memory.payload?.metadata?.suggestedTags || []).filter(Boolean)
    : [];

  // Ensure we have a valid ID
  const memoryId = memory.id || `memory-${Date.now()}`;

  // Get the memory type from all possible fields with priority to standardized location
  const memoryType = useMemo(() => {
    // Check all possible type fields in priority order
    return memory.payload?.type || 
           memory.kind || 
           memory.payload?.metadata?.type || 
           memory.payload?.metadata?.category ||
           'unknown';
  }, [memory]);

  // Create a current version object for reference
  const currentVersion: RelatedVersion = {
    id: memoryId,
    type: memoryType,
    timestamp: memory.payload?.timestamp || new Date().toISOString(),
    text: memory.payload?.text
  };

  // Format date for history items
  const formatHistoryDate = (timestamp: string) => {
    try {
      return new Date(timestamp).toLocaleString();
    } catch (e) {
      return timestamp;
    }
  };
  
  // Get all related versions from metadata
  const relatedVersions = memory.payload?.metadata?.related_versions 
    ? (memory.payload.metadata.related_versions as RelatedVersion[])
    : [];

  // Fetch memory history from the API
  const loadMemoryHistory = useCallback(async () => {
    if (!memoryId || memoryId.startsWith('memory-')) return;
    
    setIsLoadingHistory(true);
    try {
      console.log(`Loading memory history for ${memoryId}`);
      const response = await fetch(`/api/memory/history/${memoryId}`);
      if (response.ok) {
        const data = await response.json();
        console.log(`Received ${data.history?.length || 0} history items for memory ${memoryId}`);
        
        if (data.history && data.history.length > 0) {
          // Sort by timestamp (oldest first)
          data.history.sort((a: MemoryEditRecord, b: MemoryEditRecord) => 
            new Date(a.payload.timestamp).getTime() - new Date(b.payload.timestamp).getTime()
          );
          setMemoryHistory(data.history);
        } else {
          console.log('No history items found');
        }
      } else {
        console.error('Failed to load memory history:', await response.text());
      }
    } catch (error) {
      console.error('Error loading memory history:', error);
    } finally {
      setIsLoadingHistory(false);
    }
  }, [memoryId]);
  
  // Load a specific version of a memory
  const loadVersionContent = async (versionId: string) => {
    if (!versionId || versionId.startsWith('memory-')) return null;
    
    setIsLoadingVersion(true);
    try {
      // Use the standardized memory hook to get the memory by ID
      const memoryData = await getMemory(versionId);
      
      if (memoryData && memoryData.id === versionId) {
        return memoryData;
      } else {
        console.warn(`No data returned for version ID: ${versionId}`);
        return { 
          id: versionId,
          payload: {
            text: 'Content not available for this version',
            timestamp: new Date().toISOString(),
            type: 'unknown',
            metadata: { notFound: true }
          }
        };
      }
    } catch (error) {
      console.error('Error loading version content:', error);
      return { 
        id: versionId,
        payload: {
          text: `Error loading content: ${error instanceof Error ? error.message : 'Unknown error'}`,
          timestamp: new Date().toISOString(),
          type: 'error',
          metadata: { error: true }
        }
      };
    } finally {
      setIsLoadingVersion(false);
    }
  };

  // Handle selecting a specific version
  const handleSelectVersion = async (version: RelatedVersion) => {
    try {
      // Don't reload if it's the same version
      if (selectedVersion && selectedVersion.id === version.id) {
        setSelectedVersion(null);
        return;
      }
      
      // If it's the current version, just select it
      if (version.id === memoryId) {
        setSelectedVersion(currentVersion);
        return;
      }
      
      // Load the version data from the API
      const versionData = await loadVersionContent(version.id);
      
      if (versionData) {
        // Create a RelatedVersion object from the memory data
        const loadedVersion: RelatedVersion = {
          id: versionData.id,
          type: versionData.payload?.type || 'unknown',
          timestamp: versionData.payload?.timestamp || new Date().toISOString(),
          text: versionData.payload?.text,
          error: versionData.payload?.metadata?.error
        };
        
        setSelectedVersion(loadedVersion);
      } else {
        console.error('Failed to load version data');
        setSelectedVersion({
          ...version,
          error: true,
          text: 'Failed to load version data'
        });
      }
    } catch (error) {
      console.error('Error selecting version:', error);
      setSelectedVersion({
        ...version,
        error: true,
        text: `Error: ${error instanceof Error ? error.message : 'Unknown error'}`
      });
    }
  };

  const resetToCurrentVersion = () => {
    setSelectedVersion(null);
  };

  const handleTagApproval = (memoryId: string, approvedTags: string[]) => {
    // Call the parent's onTagUpdate function
    onTagUpdate(memoryId, approvedTags);
    
    // Hide the suggestions after approval
    setShowSuggestions(false);
  };

  const handleTagRejection = (memoryId: string) => {
    // Call the parent's onTagSuggestionRemove function
    onTagSuggestionRemove(memoryId);
    
    // Hide the suggestions after rejection
    setShowSuggestions(false);
  };

  // Format timestamp to a friendly format
  const formattedTimestamp = useMemo(() => {
    if (!memory.payload?.timestamp) return 'Unknown date';
    
    try {
      const date = new Date(memory.payload.timestamp);
      return date.toLocaleString();
    } catch (e) {
      return 'Invalid date';
    }
  }, [memory.payload?.timestamp]);

  // Format memory type for display
  const formattedType = useMemo(() => {
    return memoryType.replace(/_/g, ' ').toLowerCase();
  }, [memoryType]);

  // Toggle expanded state
  const toggleExpanded = () => setExpanded(!expanded);

  // Load history when history is expanded
  useEffect(() => {
    if (historyExpanded && memoryHistory.length === 0) {
      loadMemoryHistory();
    }
  }, [historyExpanded, memoryHistory.length, loadMemoryHistory]);

  // Determine CSS classes based on memory type
  const getTypeClasses = (type: string): string => {
    const baseClasses = "text-xs font-medium px-2 py-0.5 rounded-full";
    
    // Create a mapping of memory types to CSS classes
    const typeMap: Record<string, string> = {
      // Use enum values safely with indexing
      [MemoryType.MESSAGE as string]: "bg-blue-100 text-blue-800",
      // Map standard and legacy memory types to CSS classes
      "message": "bg-blue-100 text-blue-800",
      "reflection": "bg-purple-100 text-purple-800",
      "task": "bg-green-100 text-green-800",
      "insight": "bg-amber-100 text-amber-800",
      "plan": "bg-indigo-100 text-indigo-800",
      "memory_edit": "bg-gray-100 text-gray-800",
      "fact": "bg-red-100 text-red-800",
      "knowledge": "bg-teal-100 text-teal-800",
      "system_learning": "bg-cyan-100 text-cyan-800",
      "decision": "bg-orange-100 text-orange-800",
      "feedback": "bg-rose-100 text-rose-800",
      "unknown": "bg-gray-100 text-gray-800",
      "chat": "bg-blue-100 text-blue-800",
      "idea": "bg-green-100 text-green-800",
      "summary": "bg-yellow-100 text-yellow-800"
    };

    return `${baseClasses} ${typeMap[type] || "bg-gray-100 text-gray-800"}`;
  };

  return (
    <div className="rounded-lg shadow bg-white">
      {/* Memory Header */}
      <div 
        className="p-3 flex justify-between items-start cursor-pointer"
        onClick={toggleExpanded}
      >
        <div className="space-y-1 flex-1">
          {/* Memory Type Badge */}
          <div className="flex items-center space-x-2">
            <div className={getTypeClasses(memoryType)}>
              {formattedType}
            </div>
            
            {/* Memory ID */}
            <div className="text-xs text-gray-500">
              ID: {memoryId.substring(0, 8)}...
            </div>
            
            {/* Memory Timestamp */}
            <div className="text-xs text-gray-500 flex items-center space-x-1">
              <Clock className="h-3 w-3" />
              <span>{formattedTimestamp}</span>
            </div>
          </div>
          
          {/* Memory Content Preview (truncated) */}
          <p className="text-sm text-gray-700 line-clamp-3">
            {memory.payload?.text || 'No content'}
          </p>
        </div>
        
        {/* Expand/Collapse Button */}
        <div className="ml-2">
          {expanded ? (
            <ChevronUp className="h-5 w-5 text-gray-400" />
          ) : (
            <ChevronDown className="h-5 w-5 text-gray-400" />
          )}
        </div>
      </div>
      
      {/* Memory Expanded Content */}
      {expanded && (
        <div className="p-3 border-t border-gray-100">
          {/* Full Memory Content */}
          <div className="whitespace-pre-wrap text-gray-800 mb-4">
            {memory.payload?.text || 'No content'}
          </div>
          
          {/* Tags Section */}
          <div className="mb-4">
            <div className="flex items-center mb-1">
              <Tag className="h-4 w-4 text-gray-500 mr-1" />
              <span className="text-sm font-medium text-gray-700">Tags</span>
            </div>
            
            {/* Display manual tags */}
            <div className="flex flex-wrap gap-1 mb-2">
              {manualTags.length > 0 ? (
                manualTags.map((tag, index) => (
                  <span key={index} className="bg-gray-100 text-gray-800 text-xs px-2.5 py-0.5 rounded-full">
                    {tag}
                  </span>
                ))
              ) : (
                <span className="text-xs text-gray-500 italic">No tags</span>
              )}
            </div>
            
            {/* Show suggested tags approval if there are suggested tags and suggestions are visible */}
            {hasAutoGeneratedTags && suggestedTags.length > 0 && showSuggestions && (
              <SuggestedTagsApproval
                memoryId={memoryId}
                suggestedTags={suggestedTags}
                existingTags={manualTags}
                onApprove={handleTagApproval}
                onReject={() => handleTagRejection(memoryId)}
              />
            )}
          </div>
          
          {/* Memory Metadata */}
          {memory.payload?.metadata && Object.keys(memory.payload.metadata).length > 0 && (
            <div className="mb-4">
              <div className="flex items-center mb-1">
                <Info className="h-4 w-4 text-gray-500 mr-1" />
                <span className="text-sm font-medium text-gray-700">Metadata</span>
              </div>
              
              <div className="grid grid-cols-2 gap-2 text-xs">
                {Object.entries(memory.payload.metadata)
                  .filter(([key]) => !['suggestedTags', 'tags', 'related_versions'].includes(key))
                  .map(([key, value]) => (
                    <div key={key} className="flex">
                      <div className="font-medium text-gray-600 mr-1">{key}:</div>
                      <div className="text-gray-800">
                        {typeof value === 'object' 
                          ? JSON.stringify(value).substring(0, 50) 
                          : String(value).substring(0, 50)}
                      </div>
                    </div>
                  ))
                }
              </div>
            </div>
          )}
          
          {/* Memory History Toggle */}
          <div className="mt-3">
            <button 
              onClick={(e) => {
                e.stopPropagation();
                setHistoryExpanded(!historyExpanded);
              }}
              className="flex items-center text-xs text-blue-600 hover:text-blue-800 transition-colors"
            >
              {historyExpanded ? (
                <>
                  <ChevronUp className="h-3 w-3 mr-1" />
                  Hide Version History
                </>
              ) : (
                <>
                  <ChevronDown className="h-3 w-3 mr-1" />
                  Show Version History
                </>
              )}
            </button>
            
            {/* Memory History Content */}
            {historyExpanded && (
              <div className="mt-2 border-t border-gray-100 pt-2">
                {isLoadingHistory ? (
                  <div className="text-center py-2">
                    <RefreshCw className="h-4 w-4 animate-spin inline mr-1" />
                    <span className="text-xs text-gray-500">Loading history...</span>
                  </div>
                ) : memoryHistory.length === 0 ? (
                  <div className="text-xs text-gray-500 italic">No version history available</div>
                ) : (
                  <div className="space-y-2">
                    <div className="text-xs font-medium">Version History:</div>
                    
                    {/* Current Version */}
                    <div className="flex justify-between items-center p-1.5 rounded bg-blue-50 text-xs">
                      <div className="flex items-center">
                        <div className="font-medium text-blue-800">Current Version</div>
                        <div className="text-gray-500 ml-2">{formatHistoryDate(currentVersion.timestamp)}</div>
                      </div>
                      <button 
                        className="text-blue-600 hover:text-blue-800"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleSelectVersion(currentVersion);
                        }}
                      >
                        {selectedVersion?.id === currentVersion.id ? 'Hide' : 'View'}
                      </button>
                    </div>
                    
                    {/* Version History List */}
                    {memoryHistory.map((historyItem, index) => (
                      <div key={historyItem.id} className="flex justify-between items-center p-1.5 rounded bg-gray-50 text-xs">
                        <div className="flex-1">
                          <div className="font-medium text-gray-800">
                            {historyItem.payload.metadata.edit_type === 'create' ? 'Created' : 
                             historyItem.payload.metadata.edit_type === 'update' ? 'Updated' : 
                             'Deleted'} by {historyItem.payload.metadata.editor_type || 'unknown'}
                          </div>
                          <div className="text-gray-500">{formatHistoryDate(historyItem.payload.timestamp)}</div>
                          {historyItem.payload.metadata.diff_summary && (
                            <div className="text-gray-600">{historyItem.payload.metadata.diff_summary}</div>
                          )}
                        </div>
                        {historyItem.payload.metadata.previous_version_id && (
                          <button 
                            className="text-blue-600 hover:text-blue-800"
                            onClick={(e) => {
                              e.stopPropagation();
                              const version = {
                                id: historyItem.payload.metadata.previous_version_id as string,
                                type: historyItem.payload.type,
                                timestamp: historyItem.payload.timestamp
                              };
                              handleSelectVersion(version);
                            }}
                          >
                            {selectedVersion?.id === historyItem.payload.metadata.previous_version_id ? 'Hide' : 'View'}
                          </button>
                        )}
                      </div>
                    ))}
                    
                    {/* Selected Version Content */}
                    {selectedVersion && (
                      <div className="mt-4 p-3 border border-gray-200 rounded-md bg-gray-50">
                        <div className="flex justify-between items-center mb-2">
                          <div className="font-medium text-sm">
                            Version from {formatHistoryDate(selectedVersion.timestamp)}
                          </div>
                          <button 
                            onClick={(e) => {
                              e.stopPropagation();
                              resetToCurrentVersion();
                            }}
                            className="text-xs flex items-center text-blue-600 hover:text-blue-800"
                          >
                            <RotateCcw className="h-3 w-3 mr-1" />
                            Return to Current
                          </button>
                        </div>
                        
                        {isLoadingVersion ? (
                          <div className="flex items-center justify-center py-4">
                            <RefreshCw className="h-4 w-4 animate-spin mr-2" />
                            <span>Loading version content...</span>
                          </div>
                        ) : selectedVersion.error ? (
                          <div className="text-sm text-red-500">
                            {selectedVersion.text || 'Error loading version'}
                          </div>
                        ) : (
                          <div className="whitespace-pre-wrap text-sm">
                            {selectedVersion.text || 'No content available for this version'}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default MemoryItem; 
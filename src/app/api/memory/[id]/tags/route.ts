import { NextRequest, NextResponse } from 'next/server';
import { getMemoryServices } from '../../../../../server/memory/services';
import { MemoryType } from '../../../../../server/memory/config/types';

// Configure route
export const runtime = 'edge';
export const dynamic = 'force-dynamic';

/**
 * Update tags for a memory
 * This endpoint allows updating tags for a memory item
 */
export async function PUT(
  request: NextRequest,
  context: { params: { id: string } }
) {
  console.log('Received PUT request to update tags');

  try {
    // Extract and validate the memory ID - properly await params
    const { id: memoryId } = await Promise.resolve(context.params);
    console.log(`Processing tags update for memory ID: ${memoryId}`);
    
    if (!memoryId) {
      return NextResponse.json({ error: 'Memory ID is required' }, { status: 400 });
    }

    // Extract and validate tags from the request body
    const body = await request.json();
    const { tags } = body;
    
    if (!tags || !Array.isArray(tags)) {
      return NextResponse.json({ error: 'Tags must be provided as an array' }, { status: 400 });
    }

    console.log(`Tags to update: ${JSON.stringify(tags)}`);

    // Get the memory services
    const { memoryService } = await getMemoryServices();

    // First try to get the memory using the memory service with the default MESSAGE type
    // This is likely where the memory is stored based on your code structure
    console.log(`Attempting to update memory with ID: ${memoryId} directly with type: ${MemoryType.MESSAGE}`);
    try {
      // Update memory tags without trying to find it first
      const updateResult = await memoryService.updateMemory({
        id: memoryId,
        type: MemoryType.MESSAGE,
        metadata: {
          tags: tags,
          autoGeneratedTags: false,
          suggestedTags: null
        }
      });

      if (!updateResult) {
        return NextResponse.json({ error: 'Failed to update memory tags' }, { status: 500 });
      }

      // Return success with updated tags
      console.log(`Successfully updated tags for memory ${memoryId}`);
      return NextResponse.json({
        success: true,
        memoryId,
        tags
      });
    } catch (error) {
      console.error('Error updating memory tags:', error);
      return NextResponse.json({ 
        error: 'Failed to update memory tags', 
        details: error instanceof Error ? error.message : 'Unknown error'
      }, { status: 500 });
    }
  } catch (error) {
    console.error('Error processing request:', error);
    
    return NextResponse.json({ 
      error: 'Failed to process request', 
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
} 
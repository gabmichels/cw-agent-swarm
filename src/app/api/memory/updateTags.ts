import { NextRequest, NextResponse } from 'next/server';
import { getMemoryServices } from '../../../server/memory/services';
import { MemoryType } from '../../../server/memory/config/types';

/**
 * API endpoint to update tags for a memory entry
 * Supports approving suggested tags or rejecting them
 */
export async function POST(req: NextRequest) {
  try {
    const { memoryId, tags, action } = await req.json();
    
    // Validate required fields
    if (!memoryId) {
      return NextResponse.json({ success: false, error: 'Memory ID is required' }, { status: 400 });
    }
    
    // Get memory services
    const { searchService, memoryService } = await getMemoryServices();
    
    // Use search service to find the memory and determine its type
    const searchResults = await searchService.search('', {
      // Empty query to just get an exact match by ID
      filter: { id: memoryId },
      limit: 1
    });
    
    // Check if memory exists
    if (!searchResults || searchResults.length === 0) {
      return NextResponse.json({ 
        success: false, 
        error: 'Memory not found'
      }, { status: 404 });
    }
    
    // Extract memory type from the search result
    const memoryType = searchResults[0].type;
    
    if (action === 'approve') {
      // Validate tags array
      if (!Array.isArray(tags)) {
        return NextResponse.json({ success: false, error: 'Tags must be an array' }, { status: 400 });
      }
      
      // Update memory with approved tags
      const updateResult = await memoryService.updateMemory({
        id: memoryId,
        type: memoryType,
        payload: {
          metadata: {
            tags: tags,
            tagsApproved: true,
            autoGeneratedTags: false,
            suggestedTags: null
          }
        }
      });
      
      if (updateResult) {
        return NextResponse.json({ 
          success: true, 
          message: 'Tags approved successfully',
          memoryId,
          tags
        });
      } else {
        return NextResponse.json({ 
          success: false, 
          error: 'Failed to update tags'
        }, { status: 500 });
      }
    } else if (action === 'reject') {
      // Clear suggested tags
      const updateResult = await memoryService.updateMemory({
        id: memoryId,
        type: memoryType,
        payload: {
          metadata: {
            tagsRejected: true,
            autoGeneratedTags: false,
            suggestedTags: null
          }
        }
      });
      
      if (updateResult) {
        return NextResponse.json({ 
          success: true, 
          message: 'Tag suggestions rejected successfully',
          memoryId
        });
      } else {
        return NextResponse.json({ 
          success: false, 
          error: 'Failed to reject tag suggestions'
        }, { status: 500 });
      }
    } else {
      return NextResponse.json({ 
        success: false, 
        error: 'Invalid action. Must be "approve" or "reject"'
      }, { status: 400 });
    }
  } catch (error) {
    console.error('Error updating memory tags:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Failed to process request'
    }, { status: 500 });
  }
} 
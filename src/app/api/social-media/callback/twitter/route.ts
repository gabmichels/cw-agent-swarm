import { NextRequest, NextResponse } from 'next/server';
import { MultiTenantTwitterProvider } from '@/services/social-media/providers/MultiTenantTwitterProvider';

/**
 * GET /api/social-media/callback/twitter
 * 
 * Handles OAuth callback from Twitter
 * 
 * Query params:
 * - code: Authorization code from Twitter
 * - state: State parameter for security validation
 * 
 * This endpoint:
 * 1. Validates the state parameter
 * 2. Exchanges the code for access tokens
 * 3. Stores the tokens securely for the tenant
 * 4. Redirects back to the application
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    const error = searchParams.get('error');

    // Handle OAuth errors
    if (error) {
      console.error('Twitter OAuth error:', error);
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/settings?social_error=${encodeURIComponent(error)}`
      );
    }

    // Validate required parameters
    if (!code || !state) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/settings?social_error=missing_parameters`
      );
    }

    // Initialize Twitter provider
    const twitterProvider = new MultiTenantTwitterProvider();

    // For this example, we'll extract tenant info from state
    // In production, you'd store state in Redis/database and look it up
    // For now, we'll use the state parameter directly since it's generated by our provider
    const tenantId = 'demo_tenant'; // TODO: Extract from actual state or session
    const userId = 'demo_user'; // TODO: Extract from actual state or session

    if (!tenantId || !userId) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/settings?social_error=invalid_state`
      );
    }

    // Handle OAuth callback and get tokens
    const tokenResult = await twitterProvider.handleOAuthCallback({
      code,
      state,
      tenantId,
      userId
    });

    console.log('Twitter connection successful:', {
      tenantId,
      accountUsername: tokenResult.accountUsername,
      accountType: tokenResult.accountType
    });

    // Redirect back to settings with success message
    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/settings?social_success=twitter_connected&account=${tokenResult.accountUsername}`
    );

  } catch (error) {
    console.error('Twitter callback error:', error);
    
    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/settings?social_error=${encodeURIComponent(
        error instanceof Error ? error.message : 'connection_failed'
      )}`
    );
  }
}

/**
 * Example of how the state parameter would be structured:
 * 
 * const stateData = {
 *   tenantId: "tenant_01HQ7X8Z9Y2K3L4M5N6P7Q8R9S",
 *   userId: "user_01HQ7X8Z9Y2K3L4M5N6P7Q8R9T", 
 *   accountType: "company",
 *   timestamp: 1703123456789
 * };
 * 
 * const state = Buffer.from(JSON.stringify(stateData)).toString('base64');
 */ 